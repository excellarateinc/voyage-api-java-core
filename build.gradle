import org.springframework.boot.gradle.run.BootRunTask

// ****************************************************************************
// Build Dependencies
// ****************************************************************************
buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        // Public Maven Repository (default). Remove this if your environment doesn't allow direct repo access
        mavenCentral()

        // Corporate or local Maven Repository. Update variables in gradle.properties
        maven {
            url mavenRepoPublicUrl
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE')
    }
}

// ****************************************************************************
// Project Plugins
// ****************************************************************************
plugins {
    id 'net.saliman.cobertura' version '2.4.0'
}

apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'codenarc'

// Disable Spring Boot plugin repackage feature, which makes the WAR/JAR file executable
bootRepackage {
    enabled = false
}

// ****************************************************************************
// Project Properties
// ****************************************************************************
group = projectGroup
version = projectVersion
sourceCompatibility = 1.8
targetCompatibility = 1.8

// ****************************************************************************
// Project Maven Repositories (for download)
// ****************************************************************************
repositories {
    // Public Maven Repository (default). Remove this if your environment doesn't allow direct repo access
    mavenCentral()

    // Corporate or local Maven Repository. Update variables in gradle.properties
    maven {
        url mavenRepoPublicUrl
    }
}

// ****************************************************************************
// Project Maven Repositories (for upload)
// ****************************************************************************
// Upload artifacts from this project to a Maven repository, typically a Corporate or local repository.
// - Update variables in gradle.properties.
// - Execute the upload by invoking the gradle command `gradle upload`
// - SNAPSHOT: Versions with "-SNAPSHOT" appended (ie 1.0.0-SNAPSHOT) will be deployed to the maveRepoSnapshotUrl
// - RELEASE: Versions with the "-RELEASE" appended (ie 1.0.0-RELEASE) will be deployed to the mavenRepoReleaseUrl
uploadArchives {
    repositories {
        //noinspection GroovyAssignabilityCheck
        mavenDeployer {
            repository(url: mavenRepoReleaseUrl) {
                authentication(userName: mavenRepoUsername, password: mavenRepoPassword)
            }
            snapshotRepository(url: mavenRepoSnapshotUrl) {
                authentication(userName: mavenRepoUsername, password: mavenRepoPassword)
            }
        }
    }
}

// ****************************************************************************
// Project Dependencies
// ****************************************************************************
dependencies {
    // Groovy
    compile group: 'org.codehaus.groovy',           name: 'groovy-all',                         version: '2.4.10'

    // Spring
    compile group: 'org.springframework.boot',      name: 'spring-boot-starter',                version: "${springBootVersion}"
    compile group: 'org.springframework.boot',      name: 'spring-boot-starter-mail',           version: "${springBootVersion}"
    compile group: 'org.springframework.boot',      name: 'spring-boot-starter-freemarker',     version: "${springBootVersion}"

    // Amazon Web Service (AWS)
    compile group: 'org.springframework.cloud',     name: 'spring-cloud-aws-autoconfigure',     version: '1.1.3.RELEASE'
    compile group: 'org.springframework.cloud',     name: 'spring-cloud-aws-messaging',         version: '1.1.3.RELEASE'
    
    // Testing
    testCompile group: 'org.springframework.boot',  name: 'spring-boot-starter-web',            version: "${springBootVersion}"
    testCompile(group: 'org.springframework.boot',  name: 'spring-boot-starter-test',           version: "${springBootVersion}") {
        exclude(module: 'commons-logging')
    }
    testCompile group: 'org.spockframework',        name: 'spock-core',                         version: '1.1-groovy-2.4'
    testCompile group: 'org.spockframework',        name: 'spock-spring',                       version: '1.1-groovy-2.4'
    testCompile group: 'cglib',                     name: 'cglib-nodep',                        version: '3.2.4'
    testCompile group: 'org.apache.httpcomponents', name: 'httpclient'
    testCompile group: 'com.icegreen',              name: 'greenmail',                          version: '1.5.2'
}

// ****************************************************************************
// Test scope settings
// ****************************************************************************
test {
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    filter {
        includeTestsMatching '*Spec'
    }
}

// ****************************************************************************
// Codenarc Static Code Analysis plugin
// ****************************************************************************
codenarc {
    toolVersion = '0.26.0'

    codenarcMain {
        ignoreFailures false
        configFile file('codenarc/codenarc-main.rules')
        reports {
            xml.enabled = true
            html.enabled = true
        }

        maxPriority1Violations 0
        maxPriority2Violations 0
        maxPriority3Violations 0
    }
    codenarcTest {
        ignoreFailures false
        configFile file('codenarc/codenarc-test.rules')
        reports {
            xml.enabled = true
            html.enabled = true
        }

        maxPriority1Violations 0
        maxPriority2Violations 0
        maxPriority3Violations 0
    }
}

// ****************************************************************************
// Cobertura Test Coverage Plugin Config
// ****************************************************************************
cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageReportDir = new File("$buildDir/reports/cobertura")
}
test.finalizedBy(project.tasks.cobertura)

// ****************************************************************************
// Gradle Wrapper Config
// ****************************************************************************
task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

// ****************************************************************************
// Pass environment variables to Spring BootRun task when running from Gradle
// ****************************************************************************
tasks.withType(BootRunTask) {
    bootRun.systemProperties = System.properties as Map<String, ?>
}